// <auto-generated />
using System;
using Janus.Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Janus.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241104213725_AddForeignKeyToTenantInAppointment")]
    partial class AddForeignKeyToTenantInAppointment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Janus.Api.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppointmentSlotId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentSlotId");

                    b.HasIndex("TenantId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Janus.Api.Models.AppointmentSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRepeating")
                        .HasColumnType("boolean");

                    b.Property<int>("MaximumAppointments")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentAppointmentSlotId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RepeatFromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("RepeatToDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RepeatType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentAppointmentSlotId");

                    b.ToTable("AppointmentSlots");
                });

            modelBuilder.Entity("Janus.Api.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TenantId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Janus.Api.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string[]>("Blacklist")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OwnerEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(110)
                        .HasColumnType("character varying(110)");

                    b.Property<string[]>("Users")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Janus.Api.Models.Appointment", b =>
                {
                    b.HasOne("Janus.Api.Models.AppointmentSlot", "AppointmentSlot")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Janus.Api.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentSlot");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Janus.Api.Models.AppointmentSlot", b =>
                {
                    b.HasOne("Janus.Api.Models.AppointmentSlot", "ParentAppointmentSlot")
                        .WithMany()
                        .HasForeignKey("ParentAppointmentSlotId");

                    b.Navigation("ParentAppointmentSlot");
                });

            modelBuilder.Entity("Janus.Api.Models.Service", b =>
                {
                    b.HasOne("Janus.Api.Models.Service", null)
                        .WithMany("DependentServices")
                        .HasForeignKey("ServiceId");

                    b.HasOne("Janus.Api.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Janus.Api.Models.AppointmentSlot", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Janus.Api.Models.Service", b =>
                {
                    b.Navigation("DependentServices");
                });
#pragma warning restore 612, 618
        }
    }
}
